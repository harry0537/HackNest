import React, { useState, useEffect } from 'react';
import { usePentestWizard } from '../context/PentestWizardContext';
import { useWorkflow } from '../context/WorkflowContext';
import { 
  Shield, 
  FileText, 
  Search, 
  Radar, 
  Zap, 
  Network, 
  CheckCircle, 
  ArrowRight, 
  Target,
  AlertTriangle,
  Info,
  Download,
  ChevronRight,
  BookOpen,
  Building,
  Calendar,
  User,
  TrendingUp,
  Eye,
  ExternalLink
} from 'lucide-react';
import toast from 'react-hot-toast';

const PentestWizard = () => {
  const { 
    wizardState, 
    currentPhase, 
    phases, 
    initializeWizard, 
    completePhase, 
    addFinding,
    generateReport,
    isPhaseCompleted,
    canNavigateToPhase,
    isWizardComplete,
    getTotalProgress
  } = usePentestWizard();

  const [taskProgress, setTaskProgress] = useState({});
  const [currentStepData, setCurrentStepData] = useState({});
  const [showFinalReport, setShowFinalReport] = useState(false);

  useEffect(() => {
    if (!wizardState.metadata.testId) {
      const defaultEngagement = {
        tester: 'Security Analyst',
        organization: 'Target Organization',
        testType: 'External Penetration Test'
      };
      initializeWizard(defaultEngagement);
    }
  }, []);

  const getPhaseIcon = (iconName) => {
    const icons = { FileText, Search, Radar, Shield, Zap, Network };
    const IconComponent = icons[iconName] || FileText;
    return <IconComponent className="h-6 w-6" />;
  };

  const handleTaskToggle = (taskIndex) => {
    const phaseId = currentPhase.id;
    setTaskProgress(prev => ({
      ...prev,
      [phaseId]: {
        ...prev[phaseId],
        [taskIndex]: !prev[phaseId]?.[taskIndex]
      }
    }));
  };

  const getCompletedTasksCount = (phaseId) => {
    const phaseTasks = taskProgress[phaseId] || {};
    return Object.values(phaseTasks).filter(Boolean).length;
  };

  const addFindingToPhase = () => {
    if (!currentStepData.findingTitle || !currentStepData.findingDescription) {
      toast.error('Please fill in all required fields');
      return;
    }

    const finding = {
      title: currentStepData.findingTitle,
      description: currentStepData.findingDescription,
      severity: currentStepData.findingSeverity || 'Medium',
      type: currentStepData.findingType || 'General',
      exploitable: currentStepData.exploitable || false,
      evidence: currentStepData.evidence || ''
    };

    addFinding(finding);
    
    // Reset form
    setCurrentStepData({});
    
    toast.success('Finding added successfully');
  };

  const handlePhaseCompletion = () => {
    const phaseId = currentPhase.id;
    const completedTasks = Object.entries(taskProgress[phaseId] || {})
      .filter(([_, completed]) => completed)
      .map(([index, _]) => currentPhase.protocol.tasks[parseInt(index)]);

    const phaseResults = {
      completedTasks,
      findings: [],
      evidence: []
    };

    const minTasksRequired = Math.ceil(currentPhase.protocol.tasks.length * 0.7);
    if (completedTasks.length < minTasksRequired) {
      toast.error(`Please complete at least ${minTasksRequired} tasks before proceeding`);
      return;
    }

    completePhase(phaseId, phaseResults);
    setCurrentStepData({});
  };

  const exportFinalReport = async (format = 'json') => {
    const report = generateReport();
    
    let exportData;
    let filename;

    if (format === 'html') {
      exportData = generateHTMLReport(report);
      filename = `penetration-test-report-${wizardState.metadata.testId}-${new Date().toISOString().split('T')[0]}.html`;
    } else {
      exportData = JSON.stringify(report, null, 2);
      filename = `penetration-test-report-${wizardState.metadata.testId}-${new Date().toISOString().split('T')[0]}.json`;
    }
    
    const dataUri = `data:${format === 'html' ? 'text/html' : 'application/json'};charset=utf-8,${encodeURIComponent(exportData)}`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', filename);
    linkElement.click();
    
    toast.success(`Penetration test report exported as ${format.toUpperCase()}`);
  };

  const generateHTMLReport = (report) => {
    return `<!DOCTYPE html>
<html>
<head>
    <title>Penetration Testing Report - ${wizardState.metadata.testId}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; color: #333; line-height: 1.6; }
        .header { border-bottom: 3px solid #2563eb; padding-bottom: 20px; margin-bottom: 30px; }
        .risk-critical { color: #dc2626; font-weight: bold; }
        .risk-high { color: #ea580c; font-weight: bold; }
        .risk-medium { color: #ca8a04; font-weight: bold; }
        .risk-low { color: #2563eb; font-weight: bold; }
        .finding { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 8px; background: #f9f9f9; }
        .severity-critical { border-left: 5px solid #dc2626; }
        .severity-high { border-left: 5px solid #ea580c; }
        .severity-medium { border-left: 5px solid #ca8a04; }
        .severity-low { border-left: 5px solid #2563eb; }
        .severity-informational { border-left: 5px solid #6b7280; }
        .summary-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .summary-table th, .summary-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        .summary-table th { background-color: #f5f5f5; font-weight: bold; }
        .metric { background: #f0f9ff; padding: 15px; border-radius: 8px; margin: 10px 0; }
        h1 { color: #1e40af; }
        h2 { color: #1e40af; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px; }
        h3 { color: #374151; }
        .toc { background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .toc ul { list-style-type: none; padding-left: 20px; }
        .toc a { text-decoration: none; color: #2563eb; }
        .toc a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üõ°Ô∏è Penetration Testing Report</h1>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;">
            <div>
                <p><strong>Test ID:</strong> ${wizardState.metadata.testId}</p>
                <p><strong>Organization:</strong> ${wizardState.metadata.organization}</p>
                <p><strong>Test Type:</strong> ${wizardState.metadata.testType}</p>
            </div>
            <div>
                <p><strong>Tester:</strong> ${wizardState.metadata.tester}</p>
                <p><strong>Date:</strong> ${new Date(wizardState.metadata.startTime).toLocaleDateString()}</p>
                <p><strong>Overall Risk:</strong> <span class="risk-${report.executiveSummary.riskRating.toLowerCase()}">${report.executiveSummary.riskRating}</span></p>
            </div>
        </div>
    </div>
    
    <div class="toc">
        <h2>Table of Contents</h2>
        <ul>
            <li><a href="#executive-summary">1. Executive Summary</a></li>
            <li><a href="#findings-overview">2. Findings Overview</a></li>
            <li><a href="#technical-findings">3. Technical Findings</a></li>
            <li><a href="#methodology">4. Testing Methodology</a></li>
            <li><a href="#recommendations">5. Recommendations</a></li>
        </ul>
    </div>
    
    <h2 id="executive-summary">üìã Executive Summary</h2>
    <div class="metric">
        <p>This penetration testing assessment was conducted on <strong>${new Date(wizardState.metadata.startTime).toLocaleDateString()}</strong> 
        against <strong>${wizardState.metadata.organization}</strong>. The assessment identified a total of 
        <strong>${report.executiveSummary.findingsOverview.total} security findings</strong> with an overall risk rating of 
        <strong class="risk-${report.executiveSummary.riskRating.toLowerCase()}">${report.executiveSummary.riskRating}</strong>.</p>
        
        <p>The assessment followed industry-standard penetration testing methodology (${wizardState.metadata.methodology}) 
        and achieved <strong>${report.methodology.coverage}% coverage</strong> across ${report.methodology.phasesCompleted.length} testing phases.</p>
    </div>
    
    <h2 id="findings-overview">üìä Findings Overview</h2>
    <table class="summary-table">
        <thead>
            <tr>
                <th>Severity Level</th>
                <th>Count</th>
                <th>Risk Level</th>
                <th>Recommended Action</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="color: #dc2626; font-weight: bold;">Critical</td>
                <td>${report.executiveSummary.findingsOverview.critical}</td>
                <td>Immediate threat</td>
                <td>Fix immediately (0-24 hours)</td>
            </tr>
            <tr>
                <td style="color: #ea580c; font-weight: bold;">High</td>
                <td>${report.executiveSummary.findingsOverview.high}</td>
                <td>Significant risk</td>
                <td>Fix within 1 week</td>
            </tr>
            <tr>
                <td style="color: #ca8a04; font-weight: bold;">Medium</td>
                <td>${report.executiveSummary.findingsOverview.medium}</td>
                <td>Moderate risk</td>
                <td>Fix within 1 month</td>
            </tr>
            <tr>
                <td style="color: #2563eb; font-weight: bold;">Low</td>
                <td>${report.executiveSummary.findingsOverview.low}</td>
                <td>Minor risk</td>
                <td>Fix within 3 months</td>
            </tr>
            <tr>
                <td style="color: #6b7280; font-weight: bold;">Informational</td>
                <td>${report.executiveSummary.findingsOverview.informational}</td>
                <td>Best practice</td>
                <td>Consider for improvement</td>
            </tr>
        </tbody>
    </table>
    
    <h2 id="technical-findings">üîç Technical Findings</h2>
    ${report.technicalFindings.map((finding, index) => `
        <div class="finding severity-${finding.severity.toLowerCase()}">
            <h3>Finding ${index + 1}: ${finding.title}</h3>
            <p><strong>Severity:</strong> <span style="color: ${
              finding.severity === 'Critical' ? '#dc2626' :
              finding.severity === 'High' ? '#ea580c' :
              finding.severity === 'Medium' ? '#ca8a04' :
              finding.severity === 'Low' ? '#2563eb' : '#6b7280'
            };">${finding.severity}</span></p>
            <p><strong>Discovery Phase:</strong> ${finding.phase}</p>
            <p><strong>Risk Score:</strong> ${finding.riskScore}/10</p>
            
            <h4>Description:</h4>
            <p>${finding.description}</p>
            
            <h4>Recommendation:</h4>
            <p>${finding.remediation}</p>
            
            ${finding.evidence ? `
                <h4>Evidence:</h4>
                <pre style="background: #f3f4f6; padding: 10px; border-radius: 4px; overflow-x: auto; font-size: 12px;">${finding.evidence}</pre>
            ` : ''}
        </div>
    `).join('')}
    
    <h2 id="methodology">üî¨ Testing Methodology</h2>
    <div class="metric">
        <h3>Methodology: ${wizardState.metadata.methodology}</h3>
        <p><strong>Test Coverage:</strong> ${report.methodology.coverage}%</p>
        <p><strong>Total Phases:</strong> ${phases.length}</p>
        <p><strong>Completed Phases:</strong> ${report.methodology.phasesCompleted.length}</p>
    </div>
    
    <h3>Phases Completed:</h3>
    <ul>
        ${report.methodology.phasesCompleted.map(phase => `
            <li><strong>${phase.title}</strong> - ${phase.description} (${phase.estimatedTime})</li>
        `).join('')}
    </ul>
    
    <h3>Timeline:</h3>
    <ul>
        ${wizardState.timeline.slice(0, 10).map(event => `
            <li><strong>${new Date(event.timestamp).toLocaleString()}:</strong> ${event.event}</li>
        `).join('')}
        ${wizardState.timeline.length > 10 ? `<li><em>... and ${wizardState.timeline.length - 10} more events</em></li>` : ''}
    </ul>
    
    <h2 id="recommendations">üí° Recommendations</h2>
    <div class="metric">
        <h3>Immediate Actions Required:</h3>
        <ol>
            ${report.executiveSummary.findingsOverview.critical > 0 ? 
                `<li style="color: #dc2626;"><strong>Address ${report.executiveSummary.findingsOverview.critical} Critical finding(s) immediately</strong></li>` : ''
            }
            ${report.executiveSummary.findingsOverview.high > 0 ? 
                `<li style="color: #ea580c;"><strong>Remediate ${report.executiveSummary.findingsOverview.high} High severity finding(s) within 1 week</strong></li>` : ''
            }
            <li>Implement a regular vulnerability assessment schedule</li>
            <li>Establish incident response procedures</li>
            <li>Conduct security awareness training for staff</li>
        </ol>
        
        <h3>Security Best Practices:</h3>
        <ul>
            <li>Implement defense-in-depth security architecture</li>
            <li>Regular security updates and patch management</li>
            <li>Access control and privilege management</li>
            <li>Network segmentation and monitoring</li>
            <li>Regular security assessments and penetration testing</li>
        </ul>
    </div>
    
    <div style="margin-top: 40px; padding: 20px; background: #f3f4f6; border-radius: 8px;">
        <p><strong>Report Generated:</strong> ${new Date().toLocaleString()}</p>
        <p><strong>Generated by:</strong> HackNest Penetration Testing Platform</p>
        <p><em>This report contains confidential security information and should be handled according to your organization's data classification policies.</em></p>
    </div>
</body>
</html>`;
  };

  // Show final report when wizard is complete
  if (isWizardComplete() && showFinalReport) {
    const report = generateReport();
    
    return (
      <div className="min-h-screen bg-gray-900 p-6">
        <div className="max-w-7xl mx-auto space-y-6">
          {/* Header */}
          <div className="bg-gradient-to-r from-green-600 to-blue-600 rounded-lg p-6 text-white">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <CheckCircle className="h-12 w-12" />
                <div>
                  <h1 className="text-3xl font-bold">Penetration Test Complete!</h1>
                  <p className="text-green-100">Professional security assessment report is ready</p>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setShowFinalReport(false)}
                  className="btn-secondary"
                >
                  Back to Wizard
                </button>
              </div>
            </div>
          </div>

          {/* Report Summary */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 space-y-6">
              {/* Executive Summary */}
              <div className="card">
                <div className="flex items-center gap-3 mb-6">
                  <TrendingUp className="h-6 w-6 text-blue-500" />
                  <h2 className="text-2xl font-bold text-white">Executive Summary</h2>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="font-semibold text-white mb-3">Test Overview</h3>
                    <div className="space-y-2 text-sm">
                      <div><span className="text-gray-400">Organization:</span> <span className="text-white">{wizardState.metadata.organization}</span></div>
                      <div><span className="text-gray-400">Test Type:</span> <span className="text-white">{wizardState.metadata.testType}</span></div>
                      <div><span className="text-gray-400">Methodology:</span> <span className="text-white">{wizardState.metadata.methodology}</span></div>
                      <div><span className="text-gray-400">Coverage:</span> <span className="text-white">{report.methodology.coverage}%</span></div>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="font-semibold text-white mb-3">Risk Assessment</h3>
                    <div className="text-center p-4 bg-gray-800 rounded-lg">
                      <div className={`text-3xl font-bold ${
                        report.executiveSummary.riskRating === 'Critical' ? 'text-red-500' :
                        report.executiveSummary.riskRating === 'High' ? 'text-orange-500' :
                        report.executiveSummary.riskRating === 'Medium' ? 'text-yellow-500' :
                        'text-blue-500'
                      }`}>
                        {report.executiveSummary.riskRating}
                      </div>
                      <div className="text-gray-400">Overall Risk Level</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Findings Overview */}
              <div className="card">
                <h3 className="text-lg font-semibold text-white mb-4">Findings by Severity</h3>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {['Critical', 'High', 'Medium', 'Low', 'Informational'].map(severity => {
                    const count = report.executiveSummary.findingsOverview[severity.toLowerCase()];
                    const colors = {
                      Critical: 'text-red-400 bg-red-500/10 border-red-500/30',
                      High: 'text-orange-400 bg-orange-500/10 border-orange-500/30',
                      Medium: 'text-yellow-400 bg-yellow-500/10 border-yellow-500/30',
                      Low: 'text-blue-400 bg-blue-500/10 border-blue-500/30',
                      Informational: 'text-gray-400 bg-gray-500/10 border-gray-500/30'
                    };
                    
                    return (
                      <div key={severity} className={`p-3 rounded-lg border ${colors[severity]}`}>
                        <div className="text-center">
                          <div className="text-2xl font-bold">{count}</div>
                          <div className="text-sm">{severity}</div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Key Findings */}
              {report.executiveSummary.keyFindings && report.executiveSummary.keyFindings.length > 0 && (
                <div className="card">
                  <h3 className="text-lg font-semibold text-white mb-4">Key Security Findings</h3>
                  <div className="space-y-3">
                    {report.executiveSummary.keyFindings.map((finding, index) => (
                      <div key={index} className="p-4 bg-gray-800 rounded-lg border border-gray-700">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-medium text-white">{finding.title}</h4>
                          <span className={`px-2 py-1 rounded text-xs ${
                            finding.severity === 'Critical' ? 'bg-red-500/20 text-red-400' :
                            finding.severity === 'High' ? 'bg-orange-500/20 text-orange-400' :
                            finding.severity === 'Medium' ? 'bg-yellow-500/20 text-yellow-400' :
                            'bg-blue-500/20 text-blue-400'
                          }`}>
                            {finding.severity}
                          </span>
                        </div>
                        <p className="text-sm text-gray-300">{finding.summary || finding.description}</p>
                        <div className="mt-2 text-xs text-gray-500">Risk Score: {finding.riskScore}/10</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Export and Actions */}
            <div className="lg:col-span-1 space-y-6">
              <div className="card">
                <h3 className="text-lg font-semibold text-white mb-4">Export Report</h3>
                <div className="space-y-3">
                  <button
                    onClick={() => exportFinalReport('json')}
                    className="btn-primary w-full flex items-center justify-center gap-2"
                  >
                    <Download className="h-4 w-4" />
                    Export JSON
                  </button>
                  <button
                    onClick={() => exportFinalReport('html')}
                    className="btn-secondary w-full flex items-center justify-center gap-2"
                  >
                    <Download className="h-4 w-4" />
                    Export HTML Report
                  </button>
                </div>
              </div>

              <div className="card">
                <h3 className="text-lg font-semibold text-white mb-4">Test Metrics</h3>
                <div className="space-y-3 text-sm">
                  <div><span className="text-gray-400">Test ID:</span> <span className="text-white">{wizardState.metadata.testId}</span></div>
                  <div><span className="text-gray-400">Duration:</span> <span className="text-white">{Math.round((wizardState.metadata.totalDuration || 0) / 60000)} minutes</span></div>
                  <div><span className="text-gray-400">Phases Completed:</span> <span className="text-white">{report.methodology.phasesCompleted.length}/{phases.length}</span></div>
                  <div><span className="text-gray-400">Total Findings:</span> <span className="text-white">{report.executiveSummary.findingsOverview.total}</span></div>
                  <div><span className="text-gray-400">Timeline Events:</span> <span className="text-white">{wizardState.timeline.length}</span></div>
                </div>
              </div>

              <div className="card">
                <h3 className="text-lg font-semibold text-white mb-4">Next Steps</h3>
                <div className="space-y-2 text-sm text-gray-300">
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-yellow-500" />
                    <span>Review all findings with technical team</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Target className="h-4 w-4 text-blue-500" />
                    <span>Prioritize remediation by severity</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-green-500" />
                    <span>Schedule follow-up assessment</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-6 text-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Shield className="h-12 w-12" />
              <div>
                <h1 className="text-3xl font-bold">Penetration Testing Wizard</h1>
                <p className="text-blue-100">Professional security assessment following industry methodology</p>
              </div>
            </div>
            
            <div className="text-right">
              <div className="text-2xl font-bold">{getTotalProgress()}%</div>
              <div className="text-sm text-blue-100">Overall Progress</div>
              {wizardState.metadata.testId && (
                <div className="text-xs text-blue-200">Test ID: {wizardState.metadata.testId}</div>
              )}
            </div>
          </div>
          
          <div className="mt-4">
            <div className="bg-blue-800 rounded-full h-2">
              <div 
                className="bg-white rounded-full h-2 transition-all duration-300"
                style={{ width: `${getTotalProgress()}%` }}
              />
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Phase Navigation Sidebar */}
          <div className="lg:col-span-1">
            <div className="card sticky top-6">
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <BookOpen className="h-5 w-5" />
                Testing Phases
              </h3>
              
              <div className="space-y-2">
                {phases.map((phase) => {
                  const isCompleted = isPhaseCompleted(phase.id);
                  const isCurrent = currentPhase.id === phase.id;
                  
                  return (
                    <div 
                      key={phase.id}
                      className={`p-3 rounded-lg border-2 ${
                        isCurrent 
                          ? 'border-blue-500 bg-blue-500/10' 
                          : isCompleted
                          ? 'border-green-500 bg-green-500/10'
                          : 'border-gray-600 bg-gray-800/50'
                      }`}
                    >
                      <div className="flex items-center gap-3">
                        <div className={isCompleted ? 'text-green-500' : isCurrent ? 'text-blue-500' : 'text-gray-500'}>
                          {isCompleted ? (
                            <CheckCircle className="h-5 w-5" />
                          ) : (
                            getPhaseIcon(phase.icon)
                          )}
                        </div>
                        
                        <div className="flex-1">
                          <div className="font-medium text-white text-sm">{phase.title}</div>
                          <div className="text-xs text-gray-400">{phase.estimatedTime}</div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>

              {/* Engagement Info */}
              <div className="mt-6 pt-4 border-t border-gray-700">
                <h4 className="font-medium text-white mb-2">Engagement Details</h4>
                <div className="space-y-2 text-sm text-gray-300">
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    <span>{wizardState.metadata.tester}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Building className="h-4 w-4" />
                    <span>{wizardState.metadata.organization}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Shield className="h-4 w-4" />
                    <span>{wizardState.metadata.testType}</span>
                  </div>
                  {wizardState.metadata.startTime && (
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4" />
                      <span>{new Date(wizardState.metadata.startTime).toLocaleDateString()}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3 space-y-6">
            {/* Current Phase */}
            <div className="card">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-blue-500/20 rounded-lg">
                    {getPhaseIcon(currentPhase.icon)}
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-white">{currentPhase.title}</h2>
                    <p className="text-gray-400">{currentPhase.description}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  {!isPhaseCompleted(currentPhase.id) && (
                    <button
                      onClick={handlePhaseCompletion}
                      className="btn-primary flex items-center gap-2"
                      disabled={getCompletedTasksCount(currentPhase.id) < Math.ceil(currentPhase.protocol.tasks.length * 0.7)}
                    >
                      <CheckCircle className="h-4 w-4" />
                      Complete Phase
                    </button>
                  )}
                </div>
              </div>

              {/* Task Checklist */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-white">Phase Tasks</h3>
                  <div className="text-sm text-gray-400">
                    {getCompletedTasksCount(currentPhase.id)} / {currentPhase.protocol.tasks.length} completed
                  </div>
                </div>
                
                <div className="space-y-2">
                  {currentPhase.protocol.tasks.map((task, index) => (
                    <div 
                      key={index}
                      className={`p-3 rounded-lg border cursor-pointer transition-all ${
                        taskProgress[currentPhase.id]?.[index]
                          ? 'border-green-500 bg-green-500/10'
                          : 'border-gray-600 hover:border-gray-500 bg-gray-800/50'
                      }`}
                      onClick={() => handleTaskToggle(index)}
                    >
                      <div className="flex items-center gap-3">
                        <div className={`w-5 h-5 rounded border-2 flex items-center justify-center ${
                          taskProgress[currentPhase.id]?.[index]
                            ? 'border-green-500 bg-green-500'
                            : 'border-gray-500'
                        }`}>
                          {taskProgress[currentPhase.id]?.[index] && (
                            <CheckCircle className="h-3 w-3 text-white" />
                          )}
                        </div>
                        <span className={
                          taskProgress[currentPhase.id]?.[index] 
                            ? 'text-green-300 line-through' 
                            : 'text-white'
                        }>
                          {task}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Tools and Findings */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Tool Suggestions */}
              <div className="card">
                <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                  <Target className="h-5 w-5" />
                  Recommended Tools
                </h3>
                
                <div className="space-y-3">
                  {currentPhase.id === 'information-gathering' && (
                    <a href="/recon" className="block p-3 rounded-lg bg-blue-500/10 hover:bg-blue-500/20 transition-colors">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Search className="h-5 w-5 text-blue-400" />
                          <div>
                            <div className="font-medium text-white">Reconnaissance Tools</div>
                            <div className="text-sm text-gray-400">WHOIS, DNS, OSINT</div>
                          </div>
                        </div>
                        <ChevronRight className="h-4 w-4 text-gray-400" />
                      </div>
                    </a>
                  )}
                  
                  {currentPhase.id === 'vulnerability-identification' && (
                    <a href="/scan" className="block p-3 rounded-lg bg-purple-500/10 hover:bg-purple-500/20 transition-colors">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Radar className="h-5 w-5 text-purple-400" />
                          <div>
                            <div className="font-medium text-white">Port Scanning</div>
                            <div className="text-sm text-gray-400">Network discovery, port scanning</div>
                          </div>
                        </div>
                        <ChevronRight className="h-4 w-4 text-gray-400" />
                      </div>
                    </a>
                  )}
                  
                  {currentPhase.id === 'vulnerability-analysis' && (
                    <a href="/web" className="block p-3 rounded-lg bg-green-500/10 hover:bg-green-500/20 transition-colors">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Shield className="h-5 w-5 text-green-400" />
                          <div>
                            <div className="font-medium text-white">Web Testing</div>
                            <div className="text-sm text-gray-400">Web application security</div>
                          </div>
                        </div>
                        <ChevronRight className="h-4 w-4 text-gray-400" />
                      </div>
                    </a>
                  )}
                  
                  {currentPhase.id === 'exploitation' && (
                    <a href="/exploit" className="block p-3 rounded-lg bg-red-500/10 hover:bg-red-500/20 transition-colors">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Zap className="h-5 w-5 text-red-400" />
                          <div>
                            <div className="font-medium text-white">Exploitation Tools</div>
                            <div className="text-sm text-gray-400">Vulnerability exploitation</div>
                          </div>
                        </div>
                        <ChevronRight className="h-4 w-4 text-gray-400" />
                      </div>
                    </a>
                  )}
                </div>
              </div>

              {/* Findings Summary */}
              <div className="card">
                <h3 className="text-lg font-semibold text-white mb-4">Findings Overview</h3>
                
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-300">Total Findings</span>
                    <span className="font-semibold text-white">{wizardState.findings.length}</span>
                  </div>
                  
                  <div className="space-y-2">
                    {['Critical', 'High', 'Medium', 'Low', 'Informational'].map(severity => {
                      const count = wizardState.findings.filter(f => f.severity === severity).length;
                      const colors = {
                        Critical: 'text-red-400',
                        High: 'text-orange-400',
                        Medium: 'text-yellow-400',
                        Low: 'text-blue-400',
                        Informational: 'text-gray-400'
                      };
                      
                      return (
                        <div key={severity} className="flex items-center justify-between">
                          <span className={colors[severity]}>{severity}</span>
                          <span className="font-medium text-white">{count}</span>
                        </div>
                      );
                    })}
                  </div>
                </div>
                
                {isWizardComplete() && (
                  <div className="mt-6 space-y-2">
                    <button
                      onClick={() => setShowFinalReport(true)}
                      className="btn-primary w-full flex items-center justify-center gap-2"
                    >
                      <Eye className="h-4 w-4" />
                      View Final Report
                    </button>
                    <button
                      onClick={() => exportFinalReport('json')}
                      className="btn-secondary w-full flex items-center justify-center gap-2"
                    >
                      <Download className="h-4 w-4" />
                      Quick Export
                    </button>
                  </div>
                )}
              </div>
            </div>

            {/* Quick Finding Entry */}
            {!isPhaseCompleted(currentPhase.id) && (
              <div className="card">
                <h3 className="text-lg font-semibold text-white mb-4">Add Finding</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-white mb-2">Finding Title</label>
                    <input
                      type="text"
                      className="form-input"
                      placeholder="e.g., SQL Injection Vulnerability"
                      value={currentStepData.findingTitle || ''}
                      onChange={(e) => setCurrentStepData(prev => ({ ...prev, findingTitle: e.target.value }))}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-white mb-2">Severity</label>
                    <select
                      className="form-select"
                      value={currentStepData.findingSeverity || 'Medium'}
                      onChange={(e) => setCurrentStepData(prev => ({ ...prev, findingSeverity: e.target.value }))}
                    >
                      <option value="Critical">Critical</option>
                      <option value="High">High</option>
                      <option value="Medium">Medium</option>
                      <option value="Low">Low</option>
                      <option value="Informational">Informational</option>
                    </select>
                  </div>
                  
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-white mb-2">Description</label>
                    <textarea
                      className="form-input"
                      rows="3"
                      placeholder="Detailed description of the finding..."
                      value={currentStepData.findingDescription || ''}
                      onChange={(e) => setCurrentStepData(prev => ({ ...prev, findingDescription: e.target.value }))}
                    />
                  </div>
                  
                  <div className="md:col-span-2 flex justify-end">
                    <button
                      onClick={addFindingToPhase}
                      className="btn-primary"
                      disabled={!currentStepData.findingTitle || !currentStepData.findingDescription}
                    >
                      Add Finding
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PentestWizard; 