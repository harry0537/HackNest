import React, { useState } from 'react';
import { useSimplePentest } from '../context/SimplePentestContext';
import { 
  Target, 
  Play, 
  CheckCircle, 
  ArrowRight, 
  Terminal, 
  Download,
  RefreshCw,
  Shield,
  Search,
  Radar,
  Globe,
  Zap,
  FileText,
  CheckSquare,
  Square,
  Clock
} from 'lucide-react';
import toast from 'react-hot-toast';

const SimplePentestWizard = () => {
  const {
    wizardState,
    executionState,
    phases,
    currentPhaseData,
    startWizard,
    toggleTool,
    executePhase,
    nextPhase,
    generateReport,
    resetWizard,
    isPhaseComplete,
    canProceed,
    isWizardComplete,
    progressPercentage
  } = useSimplePentest();

  const [targetInput, setTargetInput] = useState('');

  const handleStartWizard = () => {
    if (!targetInput.trim()) {
      toast.error('Please enter a target domain or IP address');
      return;
    }

    const isIP = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/.test(targetInput.trim());
    const targetType = isIP ? 'ip' : 'domain';
    
    startWizard(targetInput.trim(), targetType);
  };

  const getPhaseIcon = (phaseId) => {
    const icons = {
      'target-input': Target,
      'reconnaissance': Search,
      'scanning': Radar,
      'enumeration': Globe,
      'exploitation': Zap,
      'reporting': FileText
    };
    return icons[phaseId] || Shield;
  };

  // Target Input Screen
  if (wizardState.currentPhase === 0) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center p-6">
        <div className="max-w-xl w-full">
          <div className="text-center mb-8">
            <div className="flex items-center justify-center mb-6">
              <div className="p-4 bg-blue-500/20 rounded-full">
                <Target className="h-16 w-16 text-blue-400" />
              </div>
            </div>
            <h1 className="text-4xl font-bold text-white mb-3">Pentest Wizard</h1>
            <p className="text-lg text-gray-300">Enter your target to begin step-by-step security assessment</p>
          </div>

          <div className="card space-y-6">
            <div>
              <label className="block text-sm font-medium text-white mb-2">
                Target Domain or IP Address
              </label>
              <input
                type="text"
                className="form-input text-lg"
                placeholder="e.g., example.com or 192.168.1.1"
                value={targetInput}
                onChange={(e) => setTargetInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleStartWizard()}
              />
            </div>

            <button
              onClick={handleStartWizard}
              className="btn-primary w-full text-lg py-4 flex items-center justify-center gap-3"
              disabled={!targetInput.trim()}
            >
              <Play className="h-6 w-6" />
              Start Assessment
            </button>
          </div>

          <div className="mt-6 text-center text-sm text-gray-400">
            <p>⚠️ Only test targets you own or have explicit permission to test</p>
          </div>
        </div>
      </div>
    );
  }

  // Main Wizard Screen
  return (
    <div className="min-h-screen bg-gray-900 p-6">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-6 text-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              {React.createElement(getPhaseIcon(currentPhaseData?.id), { className: "h-10 w-10" })}
              <div>
                <h1 className="text-2xl font-bold">{currentPhaseData?.title}</h1>
                <p className="text-blue-100">{currentPhaseData?.description}</p>
                <p className="text-sm text-blue-200">Target: {wizardState.target}</p>
              </div>
            </div>
            
            <div className="text-right">
              <div className="text-xl font-bold">{progressPercentage}%</div>
              <div className="text-sm text-blue-100">Complete</div>
            </div>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="card">
          <div className="flex items-center justify-between mb-4">
            {phases.slice(1).map((phase, index) => {
              const phaseIndex = index + 1;
              const isCompleted = wizardState.completedPhases.includes(phaseIndex);
              const isCurrent = wizardState.currentPhase === phaseIndex;
              const Icon = getPhaseIcon(phase.id);
              
              return (
                <React.Fragment key={phase.id}>
                  <div className="flex items-center">
                    <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 ${
                      isCompleted 
                        ? 'bg-green-500 border-green-500 text-white' 
                        : isCurrent 
                        ? 'bg-blue-500 border-blue-500 text-white' 
                        : 'border-gray-600 text-gray-400'
                    }`}>
                      {isCompleted ? (
                        <CheckCircle className="h-4 w-4" />
                      ) : (
                        <Icon className="h-4 w-4" />
                      )}
                    </div>
                    <div className="ml-2 text-sm">
                      <div className={`font-medium ${
                        isCompleted ? 'text-green-400' : isCurrent ? 'text-blue-400' : 'text-gray-400'
                      }`}>
                        {phase.title}
                      </div>
                    </div>
                  </div>
                  {index < phases.length - 2 && (
                    <div className={`flex-1 h-1 mx-4 ${
                      isCompleted ? 'bg-green-500' : 'bg-gray-600'
                    }`} />
                  )}
                </React.Fragment>
              );
            })}
          </div>
          
          <div className="bg-gray-700 rounded-full h-2">
            <div 
              className="bg-blue-500 rounded-full h-2 transition-all duration-300"
              style={{ width: `${progressPercentage}%` }}
            />
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Tool Selection */}
          <div className="lg:col-span-2">
            <div className="card">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-white">Select Tools</h2>
                {executionState.isToolRunning && (
                  <div className="flex items-center gap-2 text-sm text-blue-400">
                    <div className="loading-spinner" />
                    <span>{executionState.currentTool}</span>
                  </div>
                )}
              </div>

              {currentPhaseData && currentPhaseData.tools && currentPhaseData.tools.length > 0 ? (
                <div className="space-y-3">
                  {currentPhaseData.tools.map((tool) => (
                    <div 
                      key={tool.id}
                      className={`p-4 rounded-lg border cursor-pointer transition-all ${
                        executionState.selectedTools[tool.id]
                          ? 'border-blue-500 bg-blue-500/10'
                          : 'border-gray-600 hover:border-gray-500 bg-gray-800/50'
                      }`}
                      onClick={() => !executionState.isToolRunning && toggleTool(tool.id)}
                    >
                      <div className="flex items-center gap-3">
                        {executionState.selectedTools[tool.id] ? (
                          <CheckSquare className="h-5 w-5 text-blue-400" />
                        ) : (
                          <Square className="h-5 w-5 text-gray-400" />
                        )}
                        <div className="flex-1">
                          <h3 className="font-medium text-white">{tool.name}</h3>
                          <p className="text-sm text-gray-400">{tool.description}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <FileText className="h-12 w-12 text-gray-600 mx-auto mb-3" />
                  <h3 className="text-lg font-medium text-white mb-2">Generate Report</h3>
                  <p className="text-gray-400">Ready to compile assessment results.</p>
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex items-center justify-between mt-6 pt-4 border-t border-gray-700">
                <div className="text-sm text-gray-400">
                  {Object.values(executionState.selectedTools).filter(Boolean).length} selected
                </div>
                
                <div className="flex items-center gap-3">
                  {!isPhaseComplete && currentPhaseData && currentPhaseData.tools && currentPhaseData.tools.length > 0 && (
                    <button
                      onClick={executePhase}
                      className="btn-primary flex items-center gap-2"
                      disabled={executionState.isToolRunning || Object.values(executionState.selectedTools).filter(Boolean).length === 0}
                    >
                      <Play className="h-4 w-4" />
                      Execute Tools
                    </button>
                  )}
                  
                  {canProceed && (
                    <button
                      onClick={nextPhase}
                      className="btn-secondary flex items-center gap-2"
                    >
                      Next Phase
                      <ArrowRight className="h-4 w-4" />
                    </button>
                  )}
                  
                  {isWizardComplete && (
                    <button
                      onClick={() => {
                        const report = generateReport();
                        const dataStr = JSON.stringify(report, null, 2);
                        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
                        const exportFileDefaultName = `pentest-report-${wizardState.target}-${new Date().toISOString().split('T')[0]}.json`;
                        
                        const linkElement = document.createElement('a');
                        linkElement.setAttribute('href', dataUri);
                        linkElement.setAttribute('download', exportFileDefaultName);
                        linkElement.click();
                        
                        toast.success('Report downloaded successfully!');
                      }}
                      className="btn-primary flex items-center gap-2"
                    >
                      <Download className="h-4 w-4" />
                      Download Report
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Output Panel */}
          <div className="lg:col-span-1 space-y-4">
            <div className="card">
              <div className="flex items-center gap-3 mb-4">
                <Terminal className="h-5 w-5 text-green-400" />
                <h3 className="text-lg font-semibold text-white">Tool Output</h3>
              </div>
              
              <div className="bg-gray-900 rounded-lg p-4 h-80 overflow-y-auto font-mono text-sm">
                {executionState.isToolRunning && (
                  <div className="mb-4">
                    <div className="flex items-center gap-2 text-blue-400 mb-2">
                      <Clock className="h-4 w-4 animate-spin" />
                      <span>Running: {executionState.currentTool}</span>
                    </div>
                    <div className="bg-gray-800 rounded-full h-2">
                      <div 
                        className="bg-blue-500 rounded-full h-2 transition-all duration-300"
                        style={{ width: `${executionState.toolProgress}%` }}
                      />
                    </div>
                  </div>
                )}
                
                {executionState.toolOutput ? (
                  <pre className="text-green-400 whitespace-pre-wrap text-xs">
                    {executionState.toolOutput}
                  </pre>
                ) : (
                  <div className="text-gray-500 text-center py-12">
                    <Terminal className="h-8 w-8 mx-auto mb-2" />
                    <p>Tool output will appear here</p>
                  </div>
                )}
              </div>
            </div>

            {/* Status Card */}
            <div className="card">
              <h3 className="text-lg font-semibold text-white mb-4">Status</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-gray-400">Phase</span>
                  <span className="text-white">{wizardState.currentPhase} / {phases.length - 1}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-400">Progress</span>
                  <span className={`px-2 py-1 rounded text-xs ${
                    isPhaseComplete 
                      ? 'bg-green-500/20 text-green-400' 
                      : 'bg-yellow-500/20 text-yellow-400'
                  }`}>
                    {isPhaseComplete ? 'Complete' : 'In Progress'}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-400">Findings</span>
                  <span className="text-white">{wizardState.findings.length}</span>
                </div>
              </div>

              <div className="mt-4 pt-4 border-t border-gray-700">
                <button
                  onClick={resetWizard}
                  className="btn-secondary w-full flex items-center justify-center gap-2"
                >
                  <RefreshCw className="h-4 w-4" />
                  New Assessment
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SimplePentestWizard; 