import React, { useState } from 'react';
import { useSimplePentest } from '../context/SimplePentestContext';
import { 
  Target, 
  Play, 
  CheckCircle, 
  ArrowRight, 
  Terminal, 
  Download,
  RefreshCw,
  Shield,
  Search,
  Radar,
  Globe,
  Zap,
  FileText,
  Clock,
  Activity,
  Check,
  AlertTriangle,
  Eye,
  ExternalLink,
  Info,
  BookOpen,
  Users,
  Award,
  Star,
  TrendingUp,
  ChevronRight,
  X,
  Save
} from 'lucide-react';
import toast from 'react-hot-toast';

// Framework Selection Component
const FrameworkSelector = ({ frameworks, onSelect }) => {
  const frameworkIcons = {
    ptes: Award,
    owasp: Shield,
    nist: Users,
    sans: TrendingUp
  };

  const frameworkColors = {
    ptes: 'from-purple-600 to-indigo-600',
    owasp: 'from-red-600 to-orange-600',
    nist: 'from-blue-600 to-cyan-600',
    sans: 'from-green-600 to-emerald-600'
  };

  return (
    <div className="min-h-screen bg-gray-900 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="bg-gradient-to-r from-red-600 to-blue-600 rounded-lg p-8 text-white">
            <BookOpen className="h-16 w-16 mx-auto mb-4" />
            <h1 className="text-4xl font-bold mb-3">Select Security Testing Framework</h1>
            <p className="text-xl text-red-100">Choose your preferred industry-standard methodology</p>
          </div>
        </div>

        {/* Framework Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {Object.values(frameworks).map((framework) => {
            const IconComponent = frameworkIcons[framework.id] || Shield;
            const colorClass = frameworkColors[framework.id] || 'from-gray-600 to-gray-700';
            
            return (
              <div
                key={framework.id}
                onClick={() => onSelect(framework.id)}
                className="bg-gray-800 rounded-lg p-6 border border-gray-700 hover:border-blue-500 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-xl"
              >
                <div className={`bg-gradient-to-r ${colorClass} rounded-lg p-4 mb-4`}>
                  <IconComponent className="h-8 w-8 text-white mx-auto" />
                </div>
                
                <h3 className="text-xl font-bold text-white mb-2">{framework.name}</h3>
                <p className="text-gray-400 text-sm mb-4">{framework.description}</p>
                
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-400">Phases:</span>
                    <span className="text-white font-medium">{framework.phases.length - 1}</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-400">Total Tools:</span>
                    <span className="text-white font-medium">
                      {framework.phases.reduce((total, phase) => total + (phase.tools?.length || 0), 0)}
                    </span>
                  </div>
                </div>

                {/* Phase Preview */}
                <div className="mt-4 pt-4 border-t border-gray-700">
                  <p className="text-xs text-gray-500 mb-2">Methodology phases:</p>
                  <div className="space-y-1">
                    {framework.phases.slice(1, 4).map((phase, index) => (
                      <div key={phase.id} className="flex items-center gap-2 text-xs text-gray-400">
                        <div className="w-1 h-1 bg-blue-400 rounded-full" />
                        <span>{phase.title}</span>
                      </div>
                    ))}
                    {framework.phases.length > 4 && (
                      <div className="text-xs text-gray-500">...and more</div>
                    )}
                  </div>
                </div>

                <div className="mt-4 flex items-center justify-center text-blue-400 text-sm font-medium">
                  <span>Select Framework</span>
                  <ChevronRight className="h-4 w-4 ml-1" />
                </div>
              </div>
            );
          })}
        </div>

        {/* Info Section */}
        <div className="mt-12 bg-blue-900/20 border border-blue-600/30 rounded-lg p-6">
          <div className="flex items-start gap-3">
            <Info className="h-5 w-5 text-blue-400 mt-0.5" />
            <div className="text-sm text-blue-100">
              <p className="font-medium mb-2">Why use established frameworks?</p>
              <ul className="space-y-1 text-blue-200">
                <li>• <strong>PTES:</strong> Comprehensive penetration testing standard used by security professionals</li>
                <li>• <strong>OWASP:</strong> Web application security testing focused on common vulnerabilities</li>
                <li>• <strong>NIST SP 800-115:</strong> Government standard for security testing and assessment</li>
                <li>• <strong>SANS:</strong> Educational institute methodology covering all aspects of pentesting</li>
              </ul>
              <p className="mt-3 text-xs text-blue-300">
                Each framework follows a specific order of tools and phases to ensure comprehensive and methodical testing.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Simplified Activity Feed Component
const ActivityFeed = ({ activities }) => {
  if (!activities || activities.length === 0) {
    return (
      <div className="bg-gray-800 rounded-lg p-6 text-center">
        <Activity className="h-8 w-8 text-gray-500 mx-auto mb-3" />
        <p className="text-gray-400">No activity yet. Start a pentest to see live updates!</p>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 rounded-lg p-4 space-y-3 max-h-96 overflow-y-auto">
      {activities.slice(-10).reverse().map((activity, index) => (
        <div key={index} className="flex items-start gap-3 text-sm">
          <div className={`w-2 h-2 rounded-full mt-2 ${
            activity.type === 'success' ? 'bg-green-400' :
            activity.type === 'error' ? 'bg-red-400' :
            activity.type === 'warning' ? 'bg-yellow-400' : 'bg-blue-400'
          }`} />
          <div className="flex-1">
            <div className="text-white">{activity.message}</div>
            <div className="text-gray-500 text-xs">{activity.timestamp}</div>
          </div>
        </div>
      ))}
    </div>
  );
};

// Simple Report Summary Component
const SimpleReportSummary = ({ report, onExport }) => {
  const getRiskColor = (risk) => {
    switch(risk?.toLowerCase()) {
      case 'high': return 'text-red-400';
      case 'medium': return 'text-yellow-400';  
      case 'low': return 'text-green-400';
      default: return 'text-gray-400';
    }
  };

  return (
    <div className="space-y-6">
      {/* Success Header */}
      <div className="bg-gradient-to-r from-green-600 to-blue-600 rounded-lg p-6 text-white text-center">
        <CheckCircle className="h-12 w-12 mx-auto mb-3" />
        <h2 className="text-2xl font-bold mb-2">Assessment Complete!</h2>
        <p className="text-green-100">
          Security assessment for <span className="font-mono bg-black/20 px-2 py-1 rounded">{report.target}</span>
        </p>
        <p className="text-sm text-green-200 mt-2">
          Using {report.framework?.name || 'Unknown Framework'} methodology
        </p>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-gray-800 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-white">{report.executiveSummary?.keyFindings?.openPorts || 0}</div>
          <div className="text-sm text-gray-400">Open Ports</div>
        </div>
        <div className="bg-gray-800 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-white">{report.summary?.successfulTools || 0}</div>
          <div className="text-sm text-gray-400">Tools Run</div>
        </div>
        <div className="bg-gray-800 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-white">{report.totalFindings || 0}</div>
          <div className="text-sm text-gray-400">Findings</div>
        </div>
        <div className="bg-gray-800 rounded-lg p-4 text-center">
          <div className={`text-2xl font-bold ${getRiskColor(report.executiveSummary?.overallRisk)}`}>
            {report.executiveSummary?.overallRisk || 'Low'}
          </div>
          <div className="text-sm text-gray-400">Risk Level</div>
        </div>
      </div>

      {/* Framework Details */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
          <BookOpen className="h-5 w-5" />
          Methodology Used
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p className="text-sm text-gray-400">Framework:</p>
            <p className="text-white font-medium">{report.framework?.name || 'Unknown'}</p>
          </div>
          <div>
            <p className="text-sm text-gray-400">Phases Completed:</p>
            <p className="text-white font-medium">{report.summary?.totalPhases || 0}</p>
          </div>
          <div>
            <p className="text-sm text-gray-400">Success Rate:</p>
            <p className="text-white font-medium">{report.summary?.successRate || 0}%</p>
          </div>
          <div>
            <p className="text-sm text-gray-400">Duration:</p>
            <p className="text-white font-medium">{report.executiveSummary?.duration || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Quick Findings */}
      {report.findings?.length > 0 && (
        <div className="bg-gray-800 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
            <Eye className="h-5 w-5" />
            Key Findings
          </h3>
          <div className="space-y-3">
            {report.findings.slice(0, 3).map((finding, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-700 rounded">
                <span className="text-white text-sm">{finding.title || `Finding ${index + 1}`}</span>
                <span className={`px-2 py-1 rounded text-xs font-medium ${
                  finding.severity === 'high' ? 'bg-red-900 text-red-200' :
                  finding.severity === 'medium' ? 'bg-yellow-900 text-yellow-200' :
                  'bg-green-900 text-green-200'
                }`}>
                  {finding.severity || 'Info'}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Export Action */}
      <div className="text-center">
        <button
          onClick={onExport}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 mx-auto transition-colors"
        >
          <Download className="h-4 w-4" />
          Download {report.framework?.name || 'Security'} Report
        </button>
      </div>
    </div>
  );
};

// Report Modal Component
const ReportModal = ({ report, isOpen, onClose, onExport }) => {
  if (!isOpen || !report) return null;

  const getRiskColor = (risk) => {
    switch(risk?.toLowerCase()) {
      case 'critical': return 'text-red-400 bg-red-900/20';
      case 'high': return 'text-orange-400 bg-orange-900/20'; 
      case 'medium': return 'text-yellow-400 bg-yellow-900/20';
      case 'low': return 'text-green-400 bg-green-900/20';
      default: return 'text-blue-400 bg-blue-900/20';
    }
  };

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gray-900 border border-gray-700 rounded-lg max-w-6xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="bg-white/20 p-3 rounded-lg">
                <FileText className="h-8 w-8" />
              </div>
              <div>
                <h2 className="text-2xl font-bold">🎉 Assessment Complete!</h2>
                <p className="text-blue-100">
                  Professional security report for <span className="font-mono bg-black/20 px-2 py-1 rounded">{report.metadata.target}</span>
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-white/20 rounded-lg transition-colors"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-200px)]">
          {/* Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
              <div className="text-2xl font-bold text-blue-400">{report.findings?.total || 0}</div>
              <div className="text-sm text-gray-400">Total Findings</div>
            </div>
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
              <div className="text-2xl font-bold text-purple-400">{report.executiveSummary?.keyFindings?.openPorts || 0}</div>
              <div className="text-sm text-gray-400">Open Ports</div>
            </div>
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
              <div className="text-2xl font-bold text-green-400">{report.summary?.successRate || 0}%</div>
              <div className="text-sm text-gray-400">Success Rate</div>
            </div>
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
              <div className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getRiskColor(report.executiveSummary?.overallRisk)}`}>
                {report.executiveSummary?.overallRisk || 'Unknown'}
              </div>
              <div className="text-sm text-gray-400 mt-1">Risk Level</div>
            </div>
          </div>

          {/* Framework Info */}
          <div className="bg-gray-800 p-6 rounded-lg border border-gray-700 mb-6">
            <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
              <Eye className="h-5 w-5" />
              Assessment Overview
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <p className="text-gray-400">Framework:</p>
                <p className="text-white font-medium">{report.framework?.name || 'Unknown'}</p>
              </div>
              <div>
                <p className="text-gray-400">Duration:</p>
                <p className="text-white font-medium">{report.executiveSummary?.duration || 'Unknown'}</p>
              </div>
              <div>
                <p className="text-gray-400">Phases Completed:</p>
                <p className="text-white font-medium">{report.technicalDetails?.phasesCompleted}/{report.technicalDetails?.totalPhases}</p>
              </div>
              <div>
                <p className="text-gray-400">Tools Executed:</p>
                <p className="text-white font-medium">{report.summary?.totalTools || 0} ({report.summary?.successfulTools || 0} successful)</p>
              </div>
            </div>
          </div>

          {/* Key Recommendations */}
          {report.executiveSummary?.recommendations && report.executiveSummary.recommendations.length > 0 && (
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700 mb-6">
              <h3 className="text-lg font-semibold text-white mb-3">🎯 Key Recommendations</h3>
              <ul className="space-y-2">
                {report.executiveSummary.recommendations.slice(0, 5).map((rec, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0" />
                    <span className="text-gray-300">{rec}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Discovered Assets */}
          {report.discoveredAssets?.openPorts && report.discoveredAssets.openPorts.length > 0 && (
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <h3 className="text-lg font-semibold text-white mb-3">🚪 Discovered Open Ports</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 max-h-32 overflow-y-auto">
                {report.discoveredAssets.openPorts.slice(0, 10).map((port, index) => (
                  <div key={index} className="flex justify-between items-center p-2 bg-gray-700 rounded text-sm">
                    <span className="text-white font-mono">Port {port.port}</span>
                    <span className="text-gray-400">{port.service || 'Unknown'}</span>
                  </div>
                ))}
              </div>
              {report.discoveredAssets.openPorts.length > 10 && (
                <p className="text-xs text-gray-500 mt-2">
                  Showing first 10 ports. Full list available in downloaded report.
                </p>
              )}
            </div>
          )}
        </div>

        {/* Footer Actions */}
        <div className="border-t border-gray-700 p-6 bg-gray-800/50">
          <div className="flex flex-col sm:flex-row gap-3 justify-center">
            <button
              onClick={() => onExport(report, 'html')}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
            >
              <Download className="h-4 w-4" />
              Download Professional HTML Report
            </button>
            <button
              onClick={() => onExport(report, 'json')}
              className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
            >
              <Save className="h-4 w-4" />
              Download JSON Data
            </button>
            <button
              onClick={onClose}
              className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
            >
              <Eye className="h-4 w-4" />
              Continue to Dashboard
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

const UnifiedPentestWizard = () => {
  const {
    wizardState,
    executionState,
    phases,
    frameworks,
    currentPhaseData,
    selectFramework,
    startWizard,
    toggleTool,
    autoSelectToolsByPriority,
    executePhase,
    nextPhase,
    generateReport,
    exportReport,
    resetWizard,
    isPhaseComplete,
    canProceed,
    isWizardComplete,
    progressPercentage,
    showReportModal,
    setShowReportModal,
    completedReport
  } = useSimplePentest();

  const [targetInput, setTargetInput] = useState('');

  const handleStartWizard = () => {
    if (!targetInput.trim()) {
      toast.error('Please enter a target domain or IP address');
      return;
    }

    const isIP = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/.test(targetInput.trim());
    const targetType = isIP ? 'ip' : 'domain';
    
    startWizard(targetInput.trim(), targetType);
  };

  const handleAutoExecute = async () => {
    if (!currentPhaseData || !currentPhaseData.tools) return;
    
    // Use the framework's priority-based auto-selection
    autoSelectToolsByPriority();
    
    // Execute after a brief delay to allow state update
    setTimeout(() => {
      executePhase();
    }, 100);
  };

  const getPhaseIcon = (phaseId) => {
    const icons = {
      'target-input': Target,
      'intelligence-gathering': Search,
      'fingerprinting': Search,
      'discovery': Radar,
      'threat-modeling': Shield,
      'configuration-testing': Globe,
      'scanning': Radar,
      'enumeration': Globe,
      'vulnerability-testing': AlertTriangle,
      'vulnerability-identification': AlertTriangle,
      'vulnerability-assessment': AlertTriangle,
      'exploitation': Zap,
      'reporting': FileText
    };
    return icons[phaseId] || Shield;
  };

  const handleExportFromModal = (report, format) => {
    exportReport(report, format);
  };

  // Framework selection phase
  if (wizardState.currentPhase === 'framework-selection') {
    return <FrameworkSelector frameworks={frameworks} onSelect={selectFramework} />;
  }

  // Initial setup phase
  if (wizardState.currentPhase === 'target-input') {
    return (
      <div className="min-h-screen bg-gray-900 p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="bg-gradient-to-r from-red-600 to-blue-600 rounded-lg p-8 text-white">
              <Shield className="h-16 w-16 mx-auto mb-4" />
              <h1 className="text-4xl font-bold mb-3">HackNest Penetration Testing Wizard</h1>
              <p className="text-xl text-red-100">Professional security assessment using {wizardState.selectedFramework?.name}</p>
              <div className="mt-4 bg-black/20 rounded-lg p-3 inline-block">
                <p className="text-sm text-red-100">Selected Framework: <span className="font-bold">{wizardState.selectedFramework?.name}</span></p>
              </div>
            </div>
          </div>

          {/* Target Input */}
          <div className="bg-gray-800 rounded-lg p-8 max-w-2xl mx-auto">
            <div className="text-center mb-6">
              <Target className="h-12 w-12 text-blue-400 mx-auto mb-3" />
              <h2 className="text-2xl font-semibold text-white mb-2">Enter Your Target</h2>
              <p className="text-gray-400">Domain name or IP address to assess</p>
            </div>

            <div className="space-y-4">
              <div>
                <input
                  type="text"
                  value={targetInput}
                  onChange={(e) => setTargetInput(e.target.value)}
                  placeholder="e.g., example.com or 192.168.1.1"
                  className="w-full px-4 py-3 bg-gray-700 text-white rounded-lg border border-gray-600 focus:border-blue-500 focus:outline-none text-center text-lg"
                  onKeyPress={(e) => e.key === 'Enter' && handleStartWizard()}
                />
              </div>

              <button
                onClick={handleStartWizard}
                disabled={!targetInput.trim()}
                className="w-full bg-red-600 hover:bg-red-700 disabled:bg-gray-700 disabled:cursor-not-allowed text-white py-3 px-6 rounded-lg font-semibold transition-colors flex items-center justify-center gap-3 text-lg"
              >
                <Play className="h-5 w-5" />
                Start {wizardState.selectedFramework?.name} Assessment
              </button>
            </div>

            {/* Framework Info */}
            <div className="mt-6 p-4 bg-blue-900/20 border border-blue-600/30 rounded-lg">
              <div className="flex items-start gap-3">
                <BookOpen className="h-5 w-5 text-blue-400 mt-0.5" />
                <div className="text-sm text-blue-100">
                  <p className="font-medium mb-1">{wizardState.selectedFramework?.name} Methodology:</p>
                  <p className="text-blue-200 mb-2">{wizardState.selectedFramework?.description}</p>
                  <ul className="space-y-1 text-blue-200">
                    {wizardState.selectedFramework?.phases.slice(1).map((phase, index) => (
                      <li key={phase.id}>• <strong>Phase {index + 1}:</strong> {phase.title}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>

            {/* Back to Framework Selection */}
            <div className="mt-4 text-center">
              <button
                onClick={resetWizard}
                className="text-blue-400 hover:text-blue-300 text-sm transition-colors"
              >
                ← Change Framework
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Main wizard interface
  return (
    <div className="min-h-screen bg-gradient-to-br from-dark-900 via-dark-800 to-dark-700 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header with Progress */}
        <div className="bg-gray-800 rounded-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <Shield className="h-8 w-8 text-red-500" />
              <div>
                <h1 className="text-2xl font-bold text-white">Security Assessment</h1>
                <p className="text-gray-400">
                  Target: <span className="text-white font-mono">{wizardState.target}</span> • 
                  Framework: <span className="text-blue-400">{wizardState.selectedFramework?.name}</span>
                </p>
              </div>
            </div>
            <button
              onClick={resetWizard}
              className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
            >
              <RefreshCw className="h-4 w-4" />
              New Assessment
            </button>
          </div>

          {/* Progress Bar */}
          <div className="mb-4">
            <div className="flex justify-between text-sm text-gray-400 mb-2">
              <span>Progress</span>
              <span>{Math.round(progressPercentage || 0)}% Complete</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-red-500 to-blue-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${progressPercentage || 0}%` }}
              />
            </div>
          </div>

          {/* Phase Indicators */}
          <div className="flex gap-2 flex-wrap">
            {phases.slice(1).map((phase, index) => {
              const IconComponent = getPhaseIcon(phase.id);
              const isActive = phase.id === wizardState.currentPhase;
              const isComplete = phases.findIndex(p => p.id === phase.id) < phases.findIndex(p => p.id === wizardState.currentPhase);
              
              return (
                <div
                  key={phase.id}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    isActive ? 'bg-blue-600 text-white' :
                    isComplete ? 'bg-green-600 text-white' : 'bg-gray-700 text-gray-400'
                  }`}
                >
                  {isComplete ? (
                    <CheckCircle className="h-4 w-4" />
                  ) : (
                    <IconComponent className="h-4 w-4" />
                  )}
                  {phase.title}
                </div>
              );
            })}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {isWizardComplete() ? (
              <SimpleReportSummary 
                report={generateReport()}
                onExport={exportReport}
              />
            ) : (
              <>
                {/* Current Phase */}
                <div className="bg-gray-800 rounded-lg p-6">
                  <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center gap-3">
                      {React.createElement(getPhaseIcon(wizardState.currentPhase), { 
                        className: "h-6 w-6 text-blue-400" 
                      })}
                      <div>
                        <h2 className="text-xl font-semibold text-white">{currentPhaseData?.title}</h2>
                        <p className="text-gray-400">{currentPhaseData?.description}</p>
                      </div>
                    </div>
                    
                    {currentPhaseData?.tools && currentPhaseData.tools.length > 0 && (
                      <button
                        onClick={handleAutoExecute}
                        disabled={executionState.isExecuting}
                        className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
                      >
                        {executionState.isExecuting ? (
                          <RefreshCw className="h-4 w-4 animate-spin" />
                        ) : (
                          <Star className="h-4 w-4" />
                        )}
                        Auto Execute (Priority Order)
                      </button>
                    )}
                  </div>

                  {/* Tools */}
                  {currentPhaseData?.tools && currentPhaseData.tools.length > 0 ? (
                    <div className="space-y-3">
                      {currentPhaseData.tools.map((tool) => (
                        <div 
                          key={tool.id}
                          className={`p-4 rounded-lg border transition-colors cursor-pointer ${
                            executionState.selectedTools[tool.id] 
                              ? 'border-blue-500 bg-blue-900/20' 
                              : 'border-gray-600 bg-gray-700/50 hover:bg-gray-700'
                          }`}
                          onClick={() => toggleTool(tool.id)}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className={`w-4 h-4 rounded border-2 transition-colors ${
                                executionState.selectedTools[tool.id]
                                  ? 'border-blue-500 bg-blue-500'
                                  : 'border-gray-400'
                              }`}>
                                {executionState.selectedTools[tool.id] && (
                                  <Check className="h-3 w-3 text-white" />
                                )}
                              </div>
                              <div>
                                <div className="flex items-center gap-2">
                                  <h3 className="font-medium text-white">{tool.name}</h3>
                                  {tool.priority && (
                                    <span className="bg-blue-600 text-white text-xs px-2 py-1 rounded">
                                      Priority {tool.priority}
                                    </span>
                                  )}
                                </div>
                                <p className="text-sm text-gray-400">{wizardState.selectedFramework?.name} prescribed tool</p>
                              </div>
                            </div>
                            
                            {executionState.results[tool.id] && (
                              <div className="flex items-center gap-2">
                                {executionState.results[tool.id].success ? (
                                  <CheckCircle className="h-5 w-5 text-green-400" />
                                ) : (
                                  <AlertTriangle className="h-5 w-5 text-red-400" />
                                )}
                                <span className="text-xs text-gray-400">
                                  {executionState.results[tool.id].success ? 'Completed' : 'Failed'}
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      ))}

                      {/* Execute Button */}
                      <div className="flex items-center justify-between pt-4">
                        <div className="flex items-center gap-2 text-sm text-gray-400">
                          <Clock className="h-4 w-4" />
                          {Object.keys(executionState.selectedTools).filter(id => executionState.selectedTools[id]).length} tools selected
                        </div>
                        
                        <div className="flex items-center gap-3">
                          <button
                            onClick={executePhase}
                            disabled={
                              executionState.isExecuting || 
                              Object.keys(executionState.selectedTools).filter(id => executionState.selectedTools[id]).length === 0
                            }
                            className="bg-red-600 hover:bg-red-700 disabled:bg-gray-600 text-white px-6 py-2 rounded-lg flex items-center gap-2 transition-colors"
                          >
                            {executionState.isExecuting ? (
                              <RefreshCw className="h-4 w-4 animate-spin" />
                            ) : (
                              <Play className="h-4 w-4" />
                            )}
                            Execute Selected
                          </button>

                          {canProceed() && (
                            <button
                              onClick={nextPhase}
                              className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg flex items-center gap-2 transition-colors animate-pulse"
                            >
                              Next Phase
                              <ArrowRight className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                      </div>

                      {/* Phase Complete Notification */}
                      {canProceed() && !executionState.isExecuting && (
                        <div className="mt-4 p-4 bg-green-900/20 border border-green-600/30 rounded-lg">
                          <div className="flex items-center gap-3">
                            <CheckCircle className="h-5 w-5 text-green-400" />
                            <div className="text-sm text-green-100">
                              <p className="font-medium mb-1">🎉 {currentPhaseData?.title} Phase Complete!</p>
                              <p className="text-green-200">
                                Click <strong>"Next Phase"</strong> to continue to the next phase of your {wizardState.selectedFramework?.name} assessment.
                              </p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <FileText className="h-12 w-12 text-gray-500 mx-auto mb-3" />
                      <p className="text-gray-400">This phase focuses on documentation and planning.</p>
                      <p className="text-sm text-gray-500 mt-2">No tools to execute in this phase.</p>
                      {canProceed() && (
                        <div className="mt-6 space-y-4">
                          <div className="p-4 bg-blue-900/20 border border-blue-600/30 rounded-lg">
                            <div className="flex items-center justify-center gap-3 mb-3">
                              <CheckCircle className="h-5 w-5 text-blue-400" />
                              <p className="text-blue-100 font-medium">Ready to Continue</p>
                            </div>
                            <p className="text-blue-200 text-sm text-center">
                              This phase is complete. Click below to proceed to the next phase.
                            </p>
                          </div>
                          <button
                            onClick={nextPhase}
                            className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg flex items-center gap-2 mx-auto transition-colors animate-pulse"
                          >
                            Continue to Next Phase
                            <ArrowRight className="h-4 w-4" />
                          </button>
                        </div>
                      )}
                    </div>
                  )}
                </div>

                {/* Terminal Output */}
                {executionState.terminalOutput && (
                  <div className="bg-black rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-3">
                      <Terminal className="h-4 w-4 text-green-400" />
                      <span className="text-green-400 font-mono text-sm">Terminal Output</span>
                    </div>
                    <pre className="text-green-300 font-mono text-xs whitespace-pre-wrap max-h-64 overflow-y-auto">
                      {executionState.terminalOutput}
                    </pre>
                  </div>
                )}
              </>
            )}
          </div>

          {/* Activity Sidebar */}
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <Activity className="h-5 w-5" />
                Live Activity
              </h3>
              <ActivityFeed activities={executionState.activities} />
            </div>

            {/* Framework Info */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h4 className="font-medium text-white mb-3 flex items-center gap-2">
                <BookOpen className="h-4 w-4" />
                {wizardState.selectedFramework?.name}
              </h4>
              <p className="text-xs text-gray-400 mb-3">{wizardState.selectedFramework?.description}</p>
              <div className="space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-400 rounded-full" />
                  <span className="text-gray-300">Tools execute in priority order</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-400 rounded-full" />
                  <span className="text-gray-300">Methodology-driven phases</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-yellow-400 rounded-full" />
                  <span className="text-gray-300">Professional reporting</span>
                </div>
                <p className="text-xs text-gray-500 mt-3">
                  Framework ensures comprehensive and systematic security testing
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Tool Glossary Section */}
        <div className="mt-12 max-w-6xl mx-auto">
          <div className="card">
            <div className="mb-6">
              <h2 className="text-2xl font-bold text-white mb-2">🛠️ Comprehensive Tool Glossary</h2>
              <p className="text-dark-300">
                Complete reference for all integrated penetration testing tools with installation guides and fallback information.
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Reconnaissance Tools */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-cyber-400 border-b border-cyber-600 pb-2">
                  🔍 Reconnaissance & OSINT
                </h3>
                
                <div className="space-y-3">
                  <ToolGlossaryItem
                    name="Amass"
                    description="Advanced subdomain enumeration and asset discovery"
                    installation="go install -v github.com/OWASP/Amass/v3/..."
                    download="https://github.com/OWASP/Amass"
                    fallback="Basic DNS-based subdomain enumeration"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="Subfinder"
                    description="Fast passive subdomain enumeration"
                    installation="go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest"
                    download="https://github.com/projectdiscovery/subfinder"
                    fallback="DNS query-based discovery"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="Assetfinder"
                    description="Find domains and subdomains related to a given domain"
                    installation="go install github.com/tomnomnom/assetfinder@latest"
                    download="https://github.com/tomnomnom/assetfinder"
                    fallback="Certificate transparency search"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="TheHarvester"
                    description="Email, subdomain and people search engine"
                    installation="pip3 install theHarvester"
                    download="https://github.com/laramies/theHarvester"
                    fallback="Basic email pattern matching"
                    platforms="Windows, Linux, macOS"
                  />
                </div>
              </div>

              {/* Scanning Tools */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-cyber-400 border-b border-cyber-600 pb-2">
                  🎯 Network Scanning
                </h3>
                
                <div className="space-y-3">
                  <ToolGlossaryItem
                    name="Nmap"
                    description="Network Mapper - comprehensive port scanner"
                    installation="sudo apt install nmap (Linux) / choco install nmap (Windows)"
                    download="https://nmap.org/download.html"
                    fallback="Basic TCP connect scans"
                    platforms="Windows, Linux, macOS"
                    included={true}
                  />
                  
                  <ToolGlossaryItem
                    name="Masscan"
                    description="Ultra-fast port scanner (up to 10M packets/sec)"
                    installation="sudo apt install masscan (Linux) / Build from source (Windows)"
                    download="https://github.com/robertdavidgraham/masscan"
                    fallback="Fast Nmap scanning"
                    platforms="Linux (primary), Windows (limited)"
                  />
                </div>
              </div>

              {/* Web Testing Tools */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-cyber-400 border-b border-cyber-600 pb-2">
                  🌐 Web Application Testing
                </h3>
                
                <div className="space-y-3">
                  <ToolGlossaryItem
                    name="Nikto"
                    description="Web server and application vulnerability scanner"
                    installation="sudo apt install nikto"
                    download="https://github.com/sullo/nikto"
                    fallback="Basic web vulnerability checks using curl"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="Gobuster"
                    description="Directory and file brute forcing tool"
                    installation="go install github.com/OJ/gobuster/v3@latest"
                    download="https://github.com/OJ/gobuster"
                    fallback="Advanced directory enumeration with common wordlists"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="FFuF"
                    description="Fast web fuzzer written in Go"
                    installation="go install github.com/ffuf/ffuf@latest"
                    download="https://github.com/ffuf/ffuf"
                    fallback="Parameter fuzzing with common parameter names"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="Wapiti"
                    description="Web application vulnerability scanner"
                    installation="pip3 install wapiti3"
                    download="https://wapiti-scanner.github.io/"
                    fallback="Comprehensive manual vulnerability testing"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="OWASP ZAP"
                    description="Web application security scanner"
                    installation="Download from official website"
                    download="https://www.zaproxy.org/"
                    fallback="Security baseline assessment with curl"
                    platforms="Windows, Linux, macOS"
                  />
                </div>
              </div>

              {/* Exploitation Tools */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-cyber-400 border-b border-cyber-600 pb-2">
                  💥 Exploitation & Attack
                </h3>
                
                <div className="space-y-3">
                  <ToolGlossaryItem
                    name="SQLMap"
                    description="Automatic SQL injection and database takeover tool"
                    installation="pip3 install sqlmap"
                    download="https://github.com/sqlmapproject/sqlmap"
                    fallback="Basic SQL injection testing with common payloads"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="Hydra"
                    description="Fast network authentication cracker"
                    installation="sudo apt install hydra"
                    download="https://github.com/vanhauser-thc/thc-hydra"
                    fallback="Basic authentication testing for HTTP services"
                    platforms="Linux (primary), Windows (limited)"
                  />
                  
                  <ToolGlossaryItem
                    name="John the Ripper"
                    description="Password cracking tool"
                    installation="sudo apt install john"
                    download="https://www.openwall.com/john/"
                    fallback="Hash analysis and format identification"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="Metasploit Framework"
                    description="Penetration testing and exploitation framework"
                    installation="curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall"
                    download="https://www.metasploit.com/"
                    fallback="Vulnerability information and basic exploit checks"
                    platforms="Windows, Linux, macOS"
                  />
                  
                  <ToolGlossaryItem
                    name="Nuclei"
                    description="Fast vulnerability scanner based on simple YAML templates"
                    installation="go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest"
                    download="https://github.com/projectdiscovery/nuclei"
                    fallback="Basic vulnerability checks for common issues"
                    platforms="Windows, Linux, macOS"
                  />
                </div>
              </div>

              {/* Windows-Specific Tools */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-cyber-400 border-b border-cyber-600 pb-2">
                  🖥️ Windows Security Tools
                </h3>
                
                <div className="space-y-3">
                  <ToolGlossaryItem
                    name="Windows Built-in Tools"
                    description="systeminfo, ipconfig, netstat, net commands"
                    installation="Pre-installed with Windows"
                    download="N/A - Built into Windows"
                    fallback="PowerShell equivalents"
                    platforms="Windows"
                    included={true}
                  />
                  
                  <ToolGlossaryItem
                    name="PowerShell Security"
                    description="Advanced Windows enumeration and testing"
                    installation="Pre-installed with Windows 10+"
                    download="https://docs.microsoft.com/en-us/powershell/"
                    fallback="Command Prompt alternatives"
                    platforms="Windows"
                    included={true}
                  />
                </div>
              </div>

              {/* Additional Tools */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-cyber-400 border-b border-cyber-600 pb-2">
                  🔧 Additional Tools & Utilities
                </h3>
                
                <div className="space-y-3">
                  <ToolGlossaryItem
                    name="curl"
                    description="Command line tool for transferring data with URLs"
                    installation="Pre-installed on most systems"
                    download="https://curl.se/download.html"
                    fallback="Basic HTTP testing fallback"
                    platforms="Windows, Linux, macOS"
                    included={true}
                  />
                  
                  <ToolGlossaryItem
                    name="dig/nslookup"
                    description="DNS lookup utilities"
                    installation="Pre-installed on most systems"
                    download="N/A - Built into OS"
                    fallback="Basic DNS resolution testing"
                    platforms="Windows, Linux, macOS"
                    included={true}
                  />
                </div>
              </div>
            </div>

            {/* Installation Note */}
            <div className="mt-8 p-4 bg-dark-800 border border-cyber-600 rounded-lg">
              <h4 className="text-lg font-semibold text-cyber-400 mb-2">📋 Installation Notes</h4>
              <div className="space-y-2 text-sm text-dark-300">
                <p><strong>Linux (Debian/Ubuntu):</strong> Most tools available via apt package manager</p>
                <p><strong>Windows:</strong> Use Chocolatey, Scoop, or manual installation. Some tools have limited Windows support</p>
                <p><strong>macOS:</strong> Use Homebrew or manual installation</p>
                <p><strong>Go Tools:</strong> Require Go language installation first</p>
                <p><strong>Python Tools:</strong> Require Python 3 and pip package manager</p>
              </div>
            </div>

            {/* Fallback Information */}
            <div className="mt-6 p-4 bg-amber-900/20 border border-amber-600 rounded-lg">
              <h4 className="text-lg font-semibold text-amber-400 mb-2">⚡ Smart Fallback System</h4>
              <p className="text-sm text-amber-200">
                HackNest includes intelligent fallback mechanisms for when tools aren't installed. 
                Basic functionality is provided using built-in system commands, ensuring you can 
                always perform security assessments even without specialized tools installed.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Report Modal */}
      <ReportModal
        report={completedReport}
        isOpen={showReportModal}
        onClose={() => setShowReportModal(false)}
        onExport={handleExportFromModal}
      />
    </div>
  );
};

// Tool Glossary Item Component
const ToolGlossaryItem = ({ name, description, installation, download, fallback, platforms, included = false }) => {
  return (
    <div className="p-3 bg-dark-700 border border-dark-600 rounded-lg">
      <div className="flex items-center justify-between mb-2">
        <h4 className="font-semibold text-white flex items-center gap-2">
          {name}
          {included && <span className="text-xs bg-green-600 text-white px-2 py-1 rounded">BUILT-IN</span>}
        </h4>
        <a 
          href={download} 
          target="_blank" 
          rel="noopener noreferrer"
          className="text-xs text-cyber-400 hover:text-cyber-300"
        >
          Download ↗
        </a>
      </div>
      
      <p className="text-sm text-dark-300 mb-2">{description}</p>
      
      <div className="space-y-1 text-xs">
        <div><span className="text-dark-400">Platforms:</span> <span className="text-dark-200">{platforms}</span></div>
        <div><span className="text-dark-400">Install:</span> <span className="text-dark-200">{installation}</span></div>
        <div><span className="text-dark-400">Fallback:</span> <span className="text-dark-200">{fallback}</span></div>
      </div>
    </div>
  );
};

export default UnifiedPentestWizard; 